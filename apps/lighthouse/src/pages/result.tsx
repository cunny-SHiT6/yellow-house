import React, { useEffect } from "react";
import { CircularProgressbar } from "react-circular-progressbar";
import "react-circular-progressbar/dist/styles.css";

type Props = {
  bruh: any;
  setscreen: () => void;
}

export const Result: React.FC<Props> = (props: Props) => {
  const [progress, setProgress] = React.useState(0);

  const convertLatintoThaiNumber = (str: string) => {
    const thaiNumber = ["‡πê", "‡πë", "‡πí", "‡πì", "‡πî", "‡πï", "‡πñ", "‡πó", "‡πò", "‡πô"];
    return str.replace(/[0-9]/g, (match: any) => thaiNumber[match]);
  };

  const convertPercentToClass = (percent: number) => {
    if (percent > 50) {
      return ["text-green-500", "#5FE86C", "#98F5A2"];
    } else if (percent > 0) {
      return ["text-orange-500", "#E8905F", "#F5CB98"];
    } else {
      return ["text-red-500", "#E85F5F", "#F59898"]
    }
  }

  const convertPercentToText = (percent: number) => {
    if (percent > 50) {
      return "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏Ñ‡∏£‡∏ï‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏•‡∏¢‡∏û‡∏¢‡∏∞‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ üéâ";
    } else if (percent > 0) {
      return "‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏ä‡∏ô‡∏≤‡∏≠‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞";
    } else {
      return "‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏±‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏ä‡∏ô‡∏≤‡∏≠‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞"
    }
  }

  return (
    <div className={"w-full " + (props.bruh.data.score < 0 && 'bg-red-200')}>
      <div className="h-screen max-w-2xl px-8 mx-auto space-y-6 page">
        <div className="py-8 space-y-6">
          <h1 className="text-2xl text-center text-gray-800">
            ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
          </h1>
          <div className={"flex justify-center " + convertPercentToClass(props.bruh.data.score)}>
            <div className="w-48 h-48">
              <CircularProgressbar
                value={(props.bruh.data.score < 0 ? -props.bruh.data.score : 0)}
                text={`${convertLatintoThaiNumber(`${props.bruh.data.score}`)}`}
                styles={{
                  path: {
                    stroke: convertPercentToClass(props.bruh.data.score)[1],
                  },
                  trail: {
                    stroke: convertPercentToClass(props.bruh.data.score)[2],
                  },
                  text: {
                    fill: convertPercentToClass(props.bruh.data.score)[1],
                    fontSize: "2rem",
                  },
                }}
              />
            </div>
          </div>
          <p className="text-lg text-center text-gray-600">
            {convertPercentToText(props.bruh.data.score)}
          </p>
        </div>
        <div className="space-y-2">
          {
            props.bruh.data.violations.map((item: any) => (
              <div className={"flex items-center p-4 rounded-md " + (item.severity === 1 ? 'bg-red-700 text-white' : 'bg-gray-100 text-gray-800')}>
                <div className="w-full space-y-[4px]">
                  <h1 className="text-xl ">{item.title}</h1>
                  <h2 className="text-sm">
                    {item.description}
                  </h2>
                </div>
                <div className="flex items-center gap-4">
                  <h1>{item.violated && `-${item.violated}`}</h1>
                <div className={"w-4 h-4 rounded-full shadow" + (item.severity === 1 ? 'shadow-red-400 bg-red-500' : 'shadow-gray-400 bg-gray-500')}></div>
                </div>
              </div>
            ))
          }
        </div>

        <button onClick={props.setscreen}>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</button>
      </div>
    </div>
  );
};
